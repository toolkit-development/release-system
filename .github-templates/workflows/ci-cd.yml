name: CI/CD

on:
  push:
    branches: [master]
    paths-ignore:
      - "src/user_registry/Cargo.toml"
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '^version = ' src/user_registry/Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run clippy
        run: |
          cargo clippy

      - name: Check formatting
        run: |
          cargo fmt --all -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-audit
        run: |
          cargo install cargo-audit

      - name: Run security audit
        run: |
          cargo audit --version
          cargo audit

  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    outputs:
      build-artifacts: ${{ steps.upload-artifacts.outputs.upload-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Cache NNS state
        uses: actions/cache@v4
        with:
          path: src/test_helper/nns_state.tar.gz
          key: ${{ runner.os }}-nns-state-v1
          restore-keys: |
            ${{ runner.os }}-nns-state-

      - name: Setup NNS state if not cached
        if: steps.cache-nns.outputs.cache-hit != 'true'
        timeout-minutes: 25
        run: |
          echo "🔍 Debugging NNS setup environment:"
          echo "CI: $CI"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "Available memory:"
          free -h
          echo "Available disk space:"
          df -h
          echo "Current directory structure:"
          find src/test_helper/ -type f 2>/dev/null || echo "No files found"

          echo "📋 Setting up NNS state..."
          bash .github/scripts/setup-nns-state.sh

          echo "🔍 Verifying NNS state archive creation:"
          ls -la src/test_helper/nns_state.tar.gz || echo "Archive not found"
          find src/test_helper/ -name "*.tar.gz" -ls || echo "No tar.gz files found"

      - name: Cache NNS state after creation
        if: steps.cache-nns.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: src/test_helper/nns_state.tar.gz
          key: ${{ runner.os }}-nns-state-v1

      - name: Extract NNS state for tests
        run: |
          if [ -f "src/test_helper/nns_state.tar.gz" ]; then
            echo "📋 Extracting NNS state for tests..."
            mkdir -p src/test_helper/nns_state
            cd src/test_helper/nns_state
            tar -xzf ../nns_state.tar.gz --strip-components=1
            cd ../../..
            echo "✅ NNS state extracted successfully"
            ls -la src/test_helper/nns_state/
          else
            echo "❌ NNS state setup failed, tests cannot run"
            exit 1
          fi

      - name: Run tests
        run: |
          cargo test --workspace

      - name: Build canister
        run: |
          bash .github/scripts/build.sh

      - name: Generate checksums
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          echo "🔍 Version from get-version job: '$VERSION'"

          if [ -z "$VERSION" ]; then
            echo "⚠️ Version from get-version job is empty, extracting locally..."
            echo "Current directory: $(pwd)"
            echo "Checking if Cargo.toml exists..."
            ls -la src/user_registry/Cargo.toml || echo "Cargo.toml not found"
            
            VERSION=$(grep '^version = ' src/user_registry/Cargo.toml | cut -d'"' -f2)
            echo "📋 Locally extracted version: '$VERSION'"
          fi

          if [ -z "$VERSION" ]; then
            echo "❌ ERROR: Could not determine version"
            echo "This means both get-version job and local extraction failed"
            exit 1
          fi

          echo "✅ Using version: '$VERSION'"
          bash .github/scripts/create_checksums.sh "$VERSION"

      - name: Upload build artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: user-registry-canister
          path: |
            wasm/user_registry.wasm.gz
            wasm/user_registry.wasm.gz.sha256
            user_registry.did
            user_registry.did.sha256
            canister_ids.json
            canister_ids.json.sha256
            checksums.txt

  deploy-dev:
    name: Deploy to Dev (v${{ needs.get-version.outputs.version }})
    runs-on: ubuntu-latest
    needs: [get-version, test-and-build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check version bump and generate changelog
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' src/user_registry/Cargo.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Get the latest release tag, handle case where no tags exist
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "Latest tag: $LATEST_TAG"
            
            # Extract version from tag (remove 'v' prefix)
            LATEST_VERSION=${LATEST_TAG#v}
            echo "Latest version: $LATEST_VERSION"

            # Compare versions using sort -V (version sort)
            if [ "$(printf '%s\n' "$LATEST_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" = "$CURRENT_VERSION" ]; then
              echo "❌ Version $CURRENT_VERSION is not greater than $LATEST_VERSION"
              echo "Please bump the version in src/user_registry/Cargo.toml before deploying"
              exit 1
            fi

            echo "✅ Version bumped from $LATEST_VERSION to $CURRENT_VERSION"
          else
            echo "⚠️ No previous tags found, this appears to be the first release"
            LATEST_TAG=""
            echo "✅ Proceeding with first release version $CURRENT_VERSION"
          fi

          # Generate changelog
          ./.github/scripts/generate_changelog.sh "$CURRENT_VERSION" "$LATEST_TAG"

          # Show the generated changelog
          echo "Generated changelog:"
          cat CHANGELOG.md

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: user-registry-canister
          path: .

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Setup dfx identity (Dev)
        run: |
          echo "Setting up dev identity..."
          if [ -z "${{ secrets.IDENTITY_DEV }}" ]; then
            echo "❌ ERROR: IDENTITY_DEV secret is not set!"
            exit 1
          fi
          echo "${{ secrets.IDENTITY_DEV }}" > identity.pem
          echo "Identity PEM file created (length: $(wc -c < identity.pem) bytes)"
          dfx identity import deploy-dev-identity identity.pem --disable-encryption || true
          dfx identity use deploy-dev-identity

      - name: Deploy to Dev Network
        run: |
          echo "🚀 Installing pre-built WASM to dev network..."
          echo "WASM file: $(ls -la wasm/user_registry.wasm.gz)"

          # Install the pre-built WASM file directly
          dfx canister install --network dev user_registry --mode upgrade --wasm wasm/user_registry.wasm.gz

          echo "✅ Dev deployment completed using pre-built WASM"
        env:
          DFX_NETWORK: dev
          DFX_WARNING: -mainnet_plaintext_identity

      - name: Verify deployment and checksums
        run: |
          echo "✅ Dev deployment completed successfully"
          echo "📋 Checksums for verification:"
          echo "=========================================="
          cat checksums.txt
          echo "=========================================="
          echo "🔍 Individual checksums:"
          cat wasm/user_registry.wasm.gz.sha256
          cat user_registry.did.sha256
          cat canister_ids.json.sha256
